"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# 이메일 보낼 때 SSL 인증서 경로 인식 불가 시 설정
import os
import random
from datetime import timedelta
from pathlib import Path

import certifi
from dotenv import dotenv_values

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# dotenv_values 메서드는 env 파일의 경로를 파라미터로 전달 받아 해당 파일을 읽어온 후 Key, Value 형태로 매핑하여 dict로 반환합니다.
ENV = dotenv_values(BASE_DIR / "envs/.env")
# ENV = dotenv_values(BASE_DIR / "envs/.env.prod")  # 배포 환경 테스트

DJANGO_ENV = ENV.get("DJANGO_ENV", "local")
if DJANGO_ENV == "local":
    os.environ["SSL_CERT_FILE"] = certifi.where()

# 시크릿 키를 ENV 변수에 저장된 딕셔너리에서 가져옵니다. 만약 파일에서 읽어온 시크릿 키가 존재하지 않는다면 50자리의 무작위 문자열을 반환합니다.
SECRET_KEY = ENV.get(
    "DJANGO_SECRET_KEY",
    "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()?", k=50)),
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admin",
]

OWN_APPS = [
    "apps.chat",
    "apps.user",
    "apps.upload",
    "apps.options",
    "apps.reviews",
    "apps.leaders",
    "apps.meet",
    "apps.posts",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",  # poetry add djangorestframework-simplejwt
    "rest_framework_simplejwt.token_blacklist",  # 블랙리스트(로그아웃 구현에 사용)
    "drf_yasg",  # swagger 문서 자동화
    "storages",  # 외부 스토리지를 연동
    "corsheaders",  # CORS 설정
    "channels",  # 채팅 관련
]

INSTALLED_APPS = DJANGO_APPS + OWN_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS 설정
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 프론트 도메인 등록
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "https://onda-develop-868p.vercel.app",
    "https://www.ondamoim.com",
]
# 쿠키 포함 허용
CORS_ALLOW_CREDENTIALS = True

# 기본값 (설정안해도 됨)
# default_headers에 포함
# CORS_ALLOW_HEADERS = [
#     "accept",
#     "authorization",
#     "content-type",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
# ]
# default_methods에 포함
# CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]


ROOT_URLCONF = "config.urls"

# Redis 설정
ASGI_APPLICATION = "OndaBack.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # username, first_name, last_name, email과 비슷한 비밀번호 거부
        "OPTIONS": {
            "user_attributes": ("email", "name")  # 커스텀 유저 모델의 'name' 필드 포함
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # 기본 길이 8자
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # "password", "12345678" 등 일반적인 비밀번호 거부
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # 숫자만으로 구성된 비밀번호 거부
    },
    {
        "NAME": "apps.user.utils.validation.NoKoreanPasswordValidator",  # 한글 입력 거부 커스텀
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# 개발 환경에서 사용하는 경로
STATIC_URL = "static/"
# 장고가 자동으로 정적파일을 서빙해주는 경로 (gunicorn실행시 적용안됨)
STATIC_DIR = BASE_DIR / "static"
STATICFILES_DIRS = [
    STATIC_DIR,
]

# collectstatic하면 해당 경로로 정적 파일이 복사됨
STATIC_ROOT = BASE_DIR / ".static_root"

# Media
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Auth
AUTH_USER_MODEL = "user.User"  # 유저 모델 지정

# REST_FRAMEWORK 설정
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "utils.pagination.CustomPageNumberPagination",
}

# JWT 설정
SIMPLE_JWT = {
    "BLACKLIST_AFTER_ROTATION": True,
    # "ROTATE_REFRESH_TOKENS": True,  # 리프레시 토큰을 사용할 때마다 새로운 리프레시 토큰을 발급. 기본값 False
    "UPDATE_LAST_LOGIN": True,  # 라스트 로그인 활성화
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # It will work instead of the default serializer(TokenObtainPairSerializer).
    "TOKEN_OBTAIN_SERIALIZER": "apps.user.serializers.jwt_serializers.OndaTokenObtainPairSerializer",
    # ...
}

# 자동 슬래시 붙이는 기능 끄기
APPEND_SLASH = False

# 특정앱 스웨거에서 임시로 비활성화
# config.schema.py에서 설정
SWAGGER_EXCLUDED_APPS = [
    # "apps.user.views",
    # "apps.user.oauth_views_test",
]  # 제외할 앱 이름

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT 인증을 위해 다음과 같이 입력하세요: **Bearer &lt;access_token&gt;**",
        }
    },
}


# Email
# from django.core.mail.backends.smtp import EmailBackend
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # 개발/테스트용
EMAIL_HOST = "smtp.naver.com"  # 네이버 환결설정에서 볼 수 있음.
EMAIL_USE_TLS = True  # 보안연결
EMAIL_PORT = 587  # 네이버 메일 환경설정에서 확인 가능
EMAIL_HOST_USER = ENV.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = ENV.get("EMAIL_HOST_PASSWORD", "")


# OAuth
KAKAO_REST_API_KEY = ENV.get("KAKAO_REST_API_KEY", "")
KAKAO_CLIENT_SECRET = ENV.get("KAKAO_CLIENT_SECRET", "")


# # 기본 이미지 url 설정
# BASE_STATIC_URL = STATIC_URL + "images/"
# # 기본 프로필 이미지 url 설정
# DEFAULT_PROFILE_URL = BASE_STATIC_URL + "default_profile.webp"
# DEFAULT_PROFILE_THUMBNAIL_URL = BASE_STATIC_URL + "default_profile_thumb.webp"
# # 기본 게시글 이미지 url 설정
# DEFAULT_POST_URL = BASE_STATIC_URL + "default_post.webp"
# DEFAULT_POST_THUMBNAIL_URL = BASE_STATIC_URL + "default_post_thumb.webp"
# # 기본 이미지 url 설정
# DEFAULT_THUMBNAIL_URL = BASE_STATIC_URL + "default_thumb.webp"  # 예외 대비
